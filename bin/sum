#!/usr/bin/env python
# Sums up decimal numbers from stdin with arbitrary precision

import sys, re, optparse

RE_FIND = re.compile('[-+]?(?:[0-9]+(?:[.,][0-9]*)?|[.,][0-9]+?)(?:e-?[0-9]+)?')
RE_PARSE = re.compile('([-+])?([0-9]*)([.,][0-9]*)?(?:e(-?[0-9]+))?')

class BigDecimal(object):
  def __init__(self, num, exp=0):
    # num * 10^{exp}
    self.num = num
    self.exp = exp
    if num == 0: exp = 0

  @classmethod
  def fromstring(cls, s):
    m = RE_PARSE.match(s)
    if not m: return None
    n, e = 0, 0
    if m.group(2): n = int(m.group(2))
    if m.group(3):
      g = m.group(3).rstrip('0').lstrip('.,')
      if len(g) > 0:
        n = n * (10 ** len(g)) + int(g)
        e -= len(g)
    if m.group(4):
      e += int(m.group(4))
    if m.group(1) and m.group(1) == '-':
      n = -n
    return BigDecimal(n, e)

  def __add__(self, other):
    an, ae = self.num, self.exp
    bn, be = other.num, other.exp
    while ae > be:
      an, ae = an * 10, ae - 1
    while be > ae:
      bn, be = bn * 10, be - 1
    self.num, self.exp = an + bn, ae
    return self

  def __str__(self):
    while self.exp < 0 and self.num % 10 == 0:
      self.exp += 1
      self.num /= 10
    s = str(self.num)
    if self.exp > 0:
      s += '0' * self.exp
    elif self.exp < 0:
      if len(s) < -self.exp:
        s = '0' * (-self.exp - len(s)) + s
      s = s[:self.exp] + '.' + s[self.exp:]
    return s

def main():
  parser = optparse.OptionParser()
  parser.add_option('-o', dest='only_matching', action='store_true', default=False,
      help='Find matches by regex, parse and sum up only them')
  (options, args) = parser.parse_args()

  res = BigDecimal(0)

  for line_no, line in enumerate(sys.stdin):
    for field in line.split():
      if options.only_matching:
        for s in RE_FIND.findall(field):
          n = BigDecimal.fromstring(s)
          assert n is not None
          res += n
      else:
        n = BigDecimal.fromstring(field)
        if not n:
          sys.stderr.write("Line %d: can't parse \"%s\"\n" % (line_no + 1, field))
          sys.exit(1)
        res += n

  sys.stdout.write('%s\n' % res)

if __name__ == '__main__':
    main()
