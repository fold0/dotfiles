#!/usr/bin/env python
import os, sys, tempfile, time, socket, pipes

STORAGE_DIR = os.path.join('/home', os.environ['USER'], '.safe')
MOUNT_DIR = '/tmp/%s-safe' % os.environ['USER']
REMOTE_HOST, REMOTE_PORT, REMOTE_DIR = 'ivank@stv', 22, 'safe-exchange'
VERBOSE = 0

def sh(command, check=1):
    if VERBOSE:
        print command
    ret = os.system(command)
    if ret != 0 and check:
        die('Command "%s" failed with exit code %d' % (command, ret))

def die(message):
    sys.stderr.write(message + '\n')
    sys.exit(1)

def mkdtemp():
    s = os.path.abspath(tempfile.mkdtemp())
    for c in ' \'"':
        assert c not in s
    return s

def mounted():
    res = 0
    for line in os.popen('mount', 'r'):
        if line.startswith('encfs on %s ' % MOUNT_DIR):
            assert os.path.exists(MOUNT_DIR)
            res = 1
        elif MOUNT_DIR in line:
            die("Error: can't handle line '%s' in mount\'s output" % line)
    return res

def do_pull():
    if not mounted() or os.getcwd() != MOUNT_DIR:
        die('Please mount the encrypted directory and run this command from %s' % MOUNT_DIR)

    temp_dir = mkdtemp()
    os.chdir(temp_dir)
    print 'cd %s' % temp_dir

    try:
        sh('scp -P %d %s:%s/HEAD.tar.bz2 ./' % (REMOTE_PORT, REMOTE_HOST, REMOTE_DIR))
        sh('mkdir .safe; cd .safe; tar -jxf ../HEAD.tar.bz2')
        assert os.path.exists('.safe')
        sh('mkdir safe')
        sh('encfs %s/.safe %s/safe' % (temp_dir, temp_dir))
        sh('cd %s; git pull %s/safe' % (MOUNT_DIR, temp_dir))
        print 'Success'
    finally:
        os.chdir('/')
        if os.path.exists('%s/safe' % temp_dir):
            sh('fusermount -u -z %s/safe' % temp_dir, check=0)
        sh('rm -rf %s' % temp_dir, check=0)

def do_push():
    if mounted():
        die('Please unmount first')

    temp_dir = mkdtemp()
    temp_file = '%s-%s.tar.bz2' % (int(time.time()), socket.gethostname())
    sh('cd %s; tar -jcf %s/%s .' % (STORAGE_DIR, temp_dir, temp_file))
    sh('scp -P %d %s/%s %s:%s/%s.tmp' % (REMOTE_PORT, temp_dir, temp_file, REMOTE_HOST, REMOTE_DIR, temp_file))
    sh('ssh -p %d %s "cd %s; mv %s.tmp %s; ln -sf %s HEAD.tar.bz2"' % (REMOTE_PORT, REMOTE_HOST, REMOTE_DIR, temp_file, temp_file, temp_file))
    sh('rm -rf %s' % temp_dir)
    print 'Success'

def main():
    global VERBOSE

    os.umask(0077)

    if os.path.basename(sys.argv[0]) == 'gsafe' and len(sys.argv) == 1:
        sys.exit(os.system("gnome-terminal -e 'bash -c \"%s -; echo Press Enter to close this window; read\"'" % sys.argv[0]))

    if not os.path.exists(STORAGE_DIR):
        if os.path.exists('/home/safe/.safe') and os.environ.get('USER', '') != 'safe':
            cmd = 'sudo sudo -u safe ' + ' '.join(pipes.quote(s) for s in sys.argv)
            sys.stderr.write(cmd + '\n')
            return os.system(cmd)
        die('Storage directory %s does not exist' % STORAGE_DIR)

    if len(sys.argv) >= 2 and sys.argv[1] in ('pull', 'push'):
        if len(sys.argv) != 2:
            die('Unexpected command line arguments')
        VERBOSE = 1
        if sys.argv[1] == 'pull':
            do_pull()
        else:
            do_push()
        sys.exit(0)

    if mounted():
        print 'Already mounted'
    else:
        if os.path.exists(MOUNT_DIR):
            if len(os.listdir(MOUNT_DIR)) != 0:
                die('%s is not empty' % MOUNT_DIR)
            else:
                sh('rmdir %s' % MOUNT_DIR)

        print 'Mounting %s on %s' % (STORAGE_DIR, MOUNT_DIR)
        os.mkdir(MOUNT_DIR, 0700)
        sh('encfs %s %s' % (STORAGE_DIR, MOUNT_DIR))

    os.chdir(MOUNT_DIR)
    if os.path.exists('.git'):
        ret = os.system('git fsck')
        if ret != 0:
            print 'git fsck failed'

    os.system('bash -i')
    os.chdir('/')

    if mounted():
        ret = os.system('fusermount -u %s' % MOUNT_DIR)
        if ret == 0:
            print 'Unmounted'
            sh('rmdir %s' % MOUNT_DIR)
        else:
            while True:
                sys.stdout.write('Unmounting failed. Try lazy unmount (y/n)? ')
                sys.stdout.flush()
                line = sys.stdin.readline().strip().lower()
                if line.startswith('y'):
                    sh('fusermount -u -z %s' % MOUNT_DIR)
                elif line.startswith('n') or line == '':
                    break
    else:
        print 'Already unmounted'

    sh('sync')

if __name__ == '__main__':
    main()
