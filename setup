#!/usr/bin/env bash
# Installs/reinstall dotfiles. Can be rerun multiple times.

set -e -o pipefail

# Util functions {{{

tmpl() {
  echo "# Autogenerated from $(realpath -- "$1")"
  cat "$1" | envsubst | sed -e '/^ *name = *$/d'
}

# gen [-f] <destination path> <content file>
gen() {
  local force=0
  if [[ "$1" == "-f" ]]; then
    force=1
    shift
  fi

  local dstdir=$(dirname -- "$dst")
  if ! [[ -d "$dstdir" ]]; then
    mkdir -p "$dstdir"
  fi

  local dst="$1"
  local tmp="$(basename -- "$dst").tmp"
  cat "$2" >"$tmp"

  if [[ "$force" == 0 && -s "$dst" ]] &&
     ! grep -q '^# Autogenerated' "$dst"; then
    echo "Ignoring $dst - local version"
    rm -f "$tmp"
    return
  fi

  if [[ -s "$dst" ]] && grep -q "^# Local changes" "$dst"; then
    grep -A 10000 "^# Local changes" "$dst" >>"$tmp"
  fi

  if [[ -L "$dst" ]]; then
    rm -f "$dst"
  fi

  if ! cmp --silent "$dst" "$tmp"; then
    echo "Generated $dst"
    mv -f "$tmp" "$dst"
  else
    rm -f "$tmp"
  fi
}

link() {
  local src="$1"
  if ! [[ "$src" == /* ]]; then
    src=".dotfiles/$src";
  fi
  local src_path=$(cd ~; readlink -f "$src")

  local dst="${2:-.$(basename "$1")}"
  local dst_path="$HOME/$dst"
  if [[ "$dst" == */* ]]; then
    src="$src_path"
  fi
  if [[ "$dst" == /* ]]; then
    dst_path="$dst"
  fi

  local dst_dir="$(dirname "$dst_path")"
  if ! [[ -d "$dst_dir" ]]; then
    mkdir -p "$dst_dir"
    echo "Created $dst_dir"
  fi

  if ! [[ -e "$src_path" ]]; then
    echo "Error: $src_path doesn't exist"
    exit 1
  fi

  if [[ -e "$dst_path" ]]; then
    if [[ "$src_path" -ef "$dst_path" ]]; then
      return 0
    elif [[ -d "$dst_path" ]]; then
      rm -rf "$dst_path"
      ln -s "$src" "$dst_path"
      echo "Replaced directory: $dst_path -> $src";
    else
      rm -f "$dst_path"
      ln -s "$src" "$dst_path"
      echo "Replaced: $dst_path -> $src"
    fi
  elif [[ -L "$dst_path" ]]; then
    rm -f "$dst_path"
    ln -s "$src" "$dst_path"
    echo "Fixed broken link: $dst_path -> $src"
  else
    ln -s "$src" "$dst_path"
    echo "Linked: $dst_path -> $src"
  fi
}

# }}}

if ! [[ -f "$HOME/.dotfiles/setup" && "$HOME/.dotfiles/setup" -ef "$0" ]]; then
  echo "Error: dotfiles must be installed in ~/.dotfiles"
  exit 1
fi

cd "$HOME/.dotfiles"
umask 077

if [[ -f vars ]]; then
  source vars
fi
export SCM_NAME=${SCM_NAME:-$(whoami)}
export SCM_EMAIL=${SCM_EMAIL:-$(whoami)@$(hostname --short)}

gen ~/.gitconfig <(tmpl gitconfig.tmpl)
gen ~/.hgrc <(tmpl hgrc.tmpl)

link Rprofile
link bash_logout
link bashrc
link fonts
link gdb
link gdbinit
link htoprc ~/.config/htop/htoprc
link hushlogin
link inputrc
link ipython_config.py ~/.ipython/profile_default/ipython_config.py
link jupyter
link profile
link tmux.conf
link vim
link vimrc

if [[ $UID != 0 ]]; then
  link mpv-input.conf ~/.config/mpv/input.conf
  link qpdfview-shortcuts.conf ~/.config/qpdfview/shortcuts.conf
  link tkdiffrc
  link vlcrc ~/.config/vlc/vlcrc
  link xinitrc
  link xonshrc
  link xsessionrc
fi

if ! [[ -d ~/.local/bin ]]; then
  mkdir -p ~/.local/bin
  echo "Created: ~/.local/bin"
fi

if ! [[ -d ~/.bin ]]; then
  ln -s .local/bin ~/.bin
  echo "Linked: ~/.bin -> ~/.local/bin"
fi

# ~/.ssh {{{
mkdir -p ~/.ssh
chmod 0700 ~/.ssh

if [[ -L ~/.ssh/config && ~/.ssh/config -ef ~/.dotfiles/ssh_config ]]; then
  rm -rf ~/.ssh/config ~/.ssh/control ~/.dotfiles/{ssh_config,gitconfig,hgrc}
fi

gen ~/.ssh/config <(./ssh-config-gen.sh)

chmod 0600 ~/.ssh/config
if [[ -f ~/.ssh/authorized_keys ]]; then
  chmod 0600 ~/.ssh/authorized_keys
fi
# }}}

# Fix gnome-keyring pre 3.28 for ed25519 keys {{{
if [[ -f ~/.ssh/id_ed25519 &&
      -x /usr/bin/gnome-keyring-daemon &&
      -x /usr/bin/gnome-keyring &&
      "$(/usr/bin/gnome-keyring version | egrep -o '[0-9.]+')" < 3.28 ]]; then
  if ! [[ assets/keychain-ssh.desktop -ef ~/.config/autostart/gnome-keyring-ssh.desktop ]]; then
    mkdir -p ~/.config/autostart
    ln -sf ../../.dotfiles/assets/keychain-ssh.desktop ~/.config/autostart/gnome-keyring-ssh.desktop
    echo "Fixed up gnome-keyring-ssh"
  fi

  if ! [[ -x /usr/bin/keychain ]]; then
    echo -e "Action required: sudo apt-get install keychain"
  fi

  if [[ -f /etc/xdg/autostart/gnome-keyring-ssh.desktop ]]; then
    echo -e "Action required: sudo rm -f /etc/xdg/autostart/gnome-keyring-ssh.desktop"
  fi
fi
# }}}

if [[ -x /usr/bin/byobu && ! -f ~/.byobu/.welcome-displayed ]]; then
  mkdir -p ~/.byobu
  touch ~/.byobu/.welcome-displayed
  echo "Touched ~/.byobu/.welcome-displayed"
fi

gen -f jupyter/jupyter_notebook_config.json <(cat <<EOF
{
  "NotebookApp": {
    "nbserver_extensions": {
      $(python -c 'import jupyter_nbextensions_configurator' >/dev/null 2>&1 &&
        echo '"jupyter_nbextensions_configurator": true')
    }
  }
}
EOF
)

if [[ -f ~/.dotfiles/setup.local ]]; then
  echo "Running ~/.dotfiles/setup.local"
  source ~/.dotfiles/setup.local
fi

rm -rf python/dotfiles/__pycache__
