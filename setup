#!/usr/bin/env bash
# Installes/reinstall dotfiles. Can be rerun multiple times.

export SCM_NAME="$(whoami)"
export SCM_EMAIL="$(whoami)@$(hostname --short)"

gen_content() {
  local tmpl="$1.tmpl"
  [[ -f "$tmpl.local" ]] && tmpl+=".local"
  echo "# Autogenerated from $(readlink -f -- "$tmpl")"
  cat "$tmpl" | envsubst '$SCM_NAME $SCM_EMAIL' | sed -e '/^ *name = *$/d'
}

gen() {
  local filename="$1"
  if ! [[ -s "$filename" ]] || grep -q '^# Autogenerated' "$filename"; then
    gen_content "$filename" >"$filename.tmp"
    if ! cmp --silent "$filename" "$filename.tmp"; then
      echo "Generated $filename"
      mv -f "$filename.tmp" "$filename"
    else
      rm -f "$filename.tmp"
    fi
  fi
}

link() {
  local src="$1"
  if ! [[ "$src" == /* ]]; then
    src=".dotfiles/$src";
  fi
  local src_path=$(cd ~; readlink -f "$src")

  local dst="${2:-.$(basename "$1")}"
  local dst_path="$HOME/$dst"
  if [[ "$dst" == */* ]]; then
    src="$src_path"
  fi
  if [[ "$dst" == /* ]]; then
    dst_path="$dst"
  fi

  local dst_dir="$(dirname "$dst_path")"
  if ! [[ -d "$dst_dir" ]]; then
    mkdir -p "$dst_dir"
    echo "Created $dst_dir"
  fi

  if ! [[ -e "$src_path" ]]; then
    echo "Error: $src_path doesn't exist"
    exit 1
  fi

  if [[ -e "$dst_path" ]]; then
    if [[ "$src_path" -ef "$dst_path" ]]; then
      return 0
    elif [[ -d "$dst_path" ]]; then
      rm -rf "$dst_path"
      ln -s "$src" "$dst_path"
      echo "Replaced directory: $dst_path -> $src";
    else
      rm -f "$dst_path"
      ln -s "$src" "$dst_path"
      echo "Replaced: $dst_path -> $src"
    fi
  elif [[ -L "$dst_path" ]]; then
    rm -f "$dst_path"
    ln -s "$src" "$dst_path"
    echo "Fixed broken link: $dst_path -> $src"
  else
    ln -s "$src" "$dst_path"
    echo "Linked: $dst_path -> $src"
  fi
}

if ! [[ -f "$HOME/.dotfiles/setup" && "$HOME/.dotfiles/setup" -ef "$0" ]]; then
  echo "Error: dotfiles must be installed in ~/.dotfiles"
  exit 1
fi

cd "$HOME/.dotfiles"

[[ -f ./setup.local ]] && source ./setup.local

gen gitconfig
link gitconfig
gen hgrc
link hgrc
link Rprofile
link bash_logout
link bashrc
link fonts
link gdb
link gdbinit
link hushlogin
link inputrc
link jupyter
link profile
link tkdiffrc
link tmux.conf
link vim
link vimrc
link xinitrc

link ipython_config.py ~/.ipython/profile_default/ipython_config.py

link ssh_config ~/.ssh/config

mkdir -p ~/.ssh/control
chmod 0700 ~/.ssh ~/.ssh/control
if ! [[ -f ~/.ssh/config.local ]]; then
  touch ~/.ssh/config.local
fi
chmod 0600 ~/.ssh/config ~/.ssh/config.local
if [[ -f ~/.ssh/authorized_keys ]]; then
  chmod 0600 ~/.ssh/authorized_keys
fi

if [[ -x /usr/bin/gnome-keyring-daemon && -f ~/.ssh/id_ed25519 ]]; then
  if ! [[ data/keychain-ssh.desktop -ef ~/.config/autostart/gnome-keyring-ssh.desktop ]]; then
    mkdir -p ~/.config/autostart
    ln -sf ../../.dotfiles/data/keychain-ssh.desktop ~/.config/autostart/gnome-keyring-ssh.desktop
    echo "Fixed up gnome-keyring-ssh"
  fi
  if ! [[ -x /usr/bin/keychain ]]; then
    echo -e "Action required: sudo apt-get install keychain"
  fi
  if [[ -f /etc/xdg/autostart/gnome-keyring-ssh.desktop ]]; then
    echo -e "Action required: sudo rm -f /etc/xdg/autostart/gnome-keyring-ssh.desktop"
  fi
fi

mkdir -p ~/.byobu
touch ~/.byobu/.welcome-displayed

cat >jupyter/jupyter_notebook_config.json <<EOF
{
  "NotebookApp": {
    "nbserver_extensions": {
      $(python -c 'import jupyter_nbextensions_configurator' >/dev/null 2>&1 &&
        echo '"jupyter_nbextensions_configurator": true')
    }
  }
}
EOF
