#!/usr/bin/env python3
# Installes/reinstall dotfiles. Can be rerun multiple times.

import os, sys, shutil, subprocess

HOME = os.environ['HOME']

def sh(cmd, stdout=subprocess.PIPE):
  sys.stdout.write('+ %s\n' % cmd)
  p = subprocess.run(['/bin/bash', '-c', cmd], stdout=stdout, check=True)
  if stdout: return p.stdout.decode('utf-8')

# Checks installation path and chdirs to the root of it.
def check_and_chdir():
  if (not os.path.exists(os.path.join(HOME, '.dotfiles/setup')) or
      not os.path.samefile(os.path.join(HOME, '.dotfiles/setup'), sys.argv[0])):
    sys.stderr.write("Error: must be installed in ~/.dotfiles\n\n")
    sys.exit(1)
  os.chdir(os.path.join(HOME, '.dotfiles'))

# Installs symlink
def install(repo_path):
  src = '.dotfiles/' + repo_path
  dst = '.' + os.path.basename(repo_path)
  src_path = os.path.join(HOME, src)
  dst_path = os.path.join(HOME, dst)

  if not os.path.exists(src_path):
    sys.stderr.write("Error: %s doesn't exist\n" % src_path)
    sys.exit(1)

  if os.path.exists(dst_path):
    if os.path.samefile(src_path, dst_path):
      sys.stdout.write('Exists: ~/%s -> %s\n' % (dst, src))
      return
    elif os.path.isdir(dst_path):
      shutil.rmtree(dst_path)
      os.symlink(src, dst_path)
      sys.stdout.write('Replaced directory: ~/%s -> %s\n' % (dst, src))
    else:
      os.unlink(dst_path)
      os.symlink(src, dst_path)
      sys.stdout.write('Replaced: ~/%s -> %s\n' % (dst, src))
  elif os.path.lexists(dst_path):
    os.unlink(dst_path)
    os.symlink(src, dst_path)
    sys.stdout.write('Fixed broken link: ~/%s -> %s\n' % (dst, src))
  else:
    os.symlink(src, dst_path)
    sys.stdout.write('Linked: ~/%s -> %s\n' % (dst, src))

check_and_chdir()
sh('./setup-gen', stdout=None)
install('Rprofile')
install('bash_logout')
install('bashrc')
install('fonts')
install('hgrc')
install('gdb')
install('gdbinit')
install('gitconfig')
install('inputrc')
install('profile')
install('tkdiffrc')
install('tmux.conf')
install('vim')
install('vimrc')
install('xinitrc')
