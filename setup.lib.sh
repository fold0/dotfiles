set -e -o pipefail
umask 077

if ! [[ -f "$HOME/.dotfiles/setup" ]]; then
  echo "Error: dotfiles must be installed in ~/.dotfiles"
  exit 1
fi

# Common setup vars
if [[ -f ~/.dotfiles/vars ]]; then
  source ~/.dotfiles/vars
fi
export SCM_NAME=${SCM_NAME:-$(whoami)}
export SCM_EMAIL=${SCM_EMAIL:-$(whoami)@$(hostname --short)}


# gen [-c] <generated source file> <destination path>
# -c: check for "# Autogenerated" marker
gen() {
  local check=0
  if [[ "$1" == "-c" ]]; then
    check=1
    shift
  fi

  local dst="$2"
  local tmp="$(basename -- "$dst").tmp"
  cat "$1" >"$tmp"

  if [[ "$check" == 1 && -s "$dst" ]] &&
     ! grep -q '^# Autogenerated' "$dst"; then
    echo "Ignoring $dst - local version"
    rm -f "$tmp"
    return
  fi

  if [[ -s "$dst" ]] && grep -q "^# Local changes" "$dst"; then
    grep -A 10000 "^# Local changes" "$dst" >>"$tmp"
  fi

  if [[ -L "$dst" ]]; then
    rm -f "$dst"
  fi

  if ! cmp --silent "$dst" "$tmp"; then
    echo "Generated $dst"
    local dstdir=$(dirname -- "$dst")
    if ! [[ -d "$dstdir" ]]; then
      mkdir -p "$dstdir"
    fi
    mv -f "$tmp" "$dst"
  else
    rm -f "$tmp"
  fi
}

link_or_copy() {
  local op="$1"; shift

  local src="$1"
  if ! [[ "$src" == /* ]]; then
    src=".dotfiles/$src";
  fi
  local src_path=$(cd ~; readlink -f "$src")

  local dst="${2:-.$(basename "$1")}"
  local dst_path="$HOME/$dst"
  if [[ "$dst" == */* ]]; then
    src="$src_path"
  fi
  if [[ "$dst" == /* ]]; then
    dst_path="$dst"
  fi

  local dst_dir="$(dirname "$dst_path")"
  if ! [[ -d "$dst_dir" ]]; then
    mkdir -p -m 0700 "$dst_dir"
    echo "Created $dst_dir"
  fi

  if ! [[ -e "$src_path" ]]; then
    echo "Error: $src_path doesn't exist"
    exit 1
  fi

  if [[ "$op" == "copy" ]]; then
    if realpath -- "$dst_dir" | grep -q dotfiles; then
      echo "Error: $dst_dir is symlinking inside ~/.dotfiles/"
      exit 1
    fi

    if [[ -L "$dst_path" ]]; then
      rm -f "$dst_path"
      cp -a "$src" "$dst_path"
      echo "Copied $src over symlink $dst_path"
    elif ! [[ -f "$dst_path" ]]; then
      cp -af "$src" "$dst_path"
      echo "Copied $src to $dst_path"
    elif ! cmp --silent "$src" "$dst_path"; then
      cp -af "$src" "$dst_path"
      echo "Copied $src over existing file $dst_path"
    fi
    return
  fi

  if [[ "$op" == "link" ]]; then
    if [[ -e "$dst_path" ]]; then
      if [[ "$src_path" -ef "$dst_path" ]]; then
        return 0
      elif [[ -d "$dst_path" ]]; then
        rm -rf "$dst_path"
        ln -s "$src" "$dst_path"
        echo "Replaced directory: $dst_path -> $src";
      else
        rm -f "$dst_path"
        ln -s "$src" "$dst_path"
        echo "Replaced: $dst_path -> $src"
      fi
    elif [[ -L "$dst_path" ]]; then
      rm -f "$dst_path"
      ln -s "$src" "$dst_path"
      echo "Fixed broken link: $dst_path -> $src"
    else
      ln -s "$src" "$dst_path"
      echo "Linked: $dst_path -> $src"
    fi
    return
  fi
}

link() { link_or_copy link "$@"; }
copy() { link_or_copy copy "$@"; }

remove_dotfiles_symlinks() {
  for f in "$@"; do
    if [[ -L "$f" ]] && (readlink -f -- "$f" | fgrep -q /.dotfiles/); then
      rm -rf "$f"
      echo "Removed obsolete symlink $f"
    fi
  done
}
